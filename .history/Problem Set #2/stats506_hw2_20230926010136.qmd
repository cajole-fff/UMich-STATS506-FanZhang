---
title: "STATS506 Problem Set #02"
author: "Fan Zhang"
date: "09/24/2023"
format:
    html:
        embed-resources: true 
        code-line-numbers: true
        # code-fold: true
editor: 
    render-on-save: false 
---

GitHub Repository: [https://github.com/cajole-fff/UMich-STATS506-FanZhang/](https://github.com/cajole-fff/UMich-STATS506-FanZhang/)

## Problem 1 - Dice Game 

Let's play a dice game. It costs $2 to play. You roll a single 6-sided die.
* On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4).
* On a roll of 1, 3, or 5, you lose.
We're going to implement this in different ways. Each function takes in as input the number of dice to roll, and each function returns your total winnings or loses. 

**a. Implement various versions of this game. **

Version 1. Implement this game using a loop over the die rolls. 

```{r}
play_dice_lp <- function(num_die_rolls = 1){
    winnings <- 0
    for(i in 1:num_die_rolls){
        roll <- sample(1:6, 1)
        winnings <- winnings + (1 - (roll %% 2)) * roll - 2
    }
    return(winnings)
}
```

Version 2. Implement this game using built-in R vectorized functions.

```{r}
play_dice_vt <- function(num_die_rolls = 1){
    rolls <- sample(1:6, num_die_rolls, replace = TRUE)
    winnings <- sum((1 - (rolls %% 2)) * rolls) - 2 * num_die_rolls
    return(winnings)
}
```

Version 3. Implement this by collapsing the die rolls into a single `table()`. (Hint: Be careful indexing the table - what happens if you make a table of 5 dice rolls? You may need to look to other resources for how to solve this.)

```{r}
play_dice_tb <- function(num_die_rolls = 1){
    rolls <- sample(1:6, num_die_rolls, replace = TRUE)
    rolls <- table(rolls)
    winnings <- sum(as.numeric(names(rolls)) * (1 - (as.numeric(names(rolls)) %% 2)) * rolls) - 2 * num_die_rolls
    return(winnings)
}
```

Version 4. Implement this game by using one of the "apply" functions.

```{r}
single_roll_amount <- function(roll) {
    return ((1 - (roll %% 2)) * roll)
}

play_dice_ap <- function(num_die_rolls = 1){
    rolls <- sample(1:6, num_die_rolls, replace = TRUE)
    winnings <- sum(sapply(rolls, single_roll_amount)) - 2 * num_die_rolls
    return(winnings)
}
```

**b. Demonstrate that all versions work. Do so by running each a few times, once with an input a 3, and once with an input of 3000.**
```{r}
cat("play_dice_lp(3):", play_dice_lp(3), "\n")
cat("play_dice_lp(3000):", play_dice_lp(3000), "\n")
cat("play_dice_vt(3):", play_dice_vt(3), "\n")
cat("play_dice_vt(3000):", play_dice_vt(3000), "\n")
cat("play_dice_tb(3):", play_dice_tb(3), "\n")
cat("play_dice_tb(3000):", play_dice_tb(3000), "\n")
cat("play_dice_ap(3):", play_dice_ap(3), "\n")
cat("play_dice_ap(3000):", play_dice_ap(3000), "\n")
```

**c. Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization.)**

Set a random seed:
```{r}
random_seed <- 93
```

Test those functions:

```{r}
set.seed(random_seed)
cat("play_dice_lp(3):", play_dice_lp(3), "\n")
set.seed(random_seed)
cat("play_dice_vt(3):", play_dice_vt(3), "\n")
set.seed(random_seed)
cat("play_dice_tb(3):", play_dice_tb(3), "\n")
set.seed(random_seed)
cat("play_dice_ap(3):", play_dice_ap(3), "\n")
set.seed(random_seed)
cat("play_dice_lp(3000):", play_dice_lp(3000), "\n")
set.seed(random_seed)
cat("play_dice_vt(3000):", play_dice_vt(3000), "\n")
set.seed(random_seed)
cat("play_dice_tb(3000):", play_dice_tb(3000), "\n")
set.seed(random_seed)
cat("play_dice_ap(3000):", play_dice_ap(3000), "\n")
```

**d. Use the `microbenchmark` package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results.**

```{r}
library(microbenchmark)
mb_100 <- microbenchmark(lp=play_dice_lp(100), vt=play_dice_vt(100), tb=play_dice_tb(100), ap=play_dice_ap(100))
mb_10000 <- microbenchmark(lp=play_dice_lp(10000), vt=play_dice_vt(10000), tb=play_dice_tb(10000), ap=play_dice_ap(10000))
print(mb_100)
print(mb_10000)
```

As shown above, `play_dice_vt` is fastest, and  `play_dice_lp` is slowest. It is because the `play_dice_vt` utilizes vectorized calculation, which has many builtin optimizations. On the contrary, `play_dice_lp` uses `for` loops and it need to check the condition, allocate memory and calculate the result in each iteration, which is time-consuming. Function `play_dice_tb` counts the number of each element in the `rolls` vector before calculating the winning amount, which is slower than direct calculation; function `play_dice_ap` uses `sapply` is even slower, but still faster than `play_dice_lp`.

**e. Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.**
```{r}
# Run a Monte Carlo simulation
monte_carlo <- function(num_simulations = 1000, num_die_rolls = 100){
    winnings <- rep(0, num_simulations)
    for(i in 1:num_simulations){
        winnings[i] <- play_dice_vt(num_die_rolls)
    }
    return(winnings)
}
sim_result <- monte_carlo(100000, 100)
# Calculate average winning amount
cat("Average winning amount:", mean(sim_result), "\n")
# Histogram of winning amount with normal distribution
hist(sim_result, breaks = 100, freq = FALSE, main = "Histogram of winning amount", xlab = "Winning amount")
# Add a normal curve
curve(dnorm(x, mean = mean(sim_result), sd = sd(sim_result)), col = "red", lwd = 2, add = TRUE)
```

According to the simulation above, the winning amount roughly follows a normal distribution with zero mean, and the average winning amount is -0.02452, which is close to 0. Therefore, I think this is a fair game.


## Problem 2 - Linear Regression 

Download the cars data set available at [https://corgis-edu.github.io/corgis/csv/cars/](https://corgis-edu.github.io/corgis/csv/cars/). The goal is to examine the relationship between horsepower and highway gas mileage.

```{r}
# Load the data 
cars <- read.csv('./cars.csv')
summary(cars)
```

**a. The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.** 

```{r}
colnames(cars) <- c('height', 'length', 'width', 'driveline', 'engine_type', 'hybrid', 'num_fwd_gears', 'transmission', 'city_mpg', 'fuel_type', 'highway_mpg', 'classification', 'id', 'make', 'model_year', 'year', 'horsepower', 'torque')
summary(cars)
```

**b. Restrict the data to cars whose Fuel Type is "Gasoline".** 

```{r}
cars <- cars[cars$fuel_type == 'Gasoline', ]
```

**c. Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:**

* **The torque of the engine**
* **All three dimensions of the car**
* **The year the car was released, as a categorical variable**

**Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.**

```{r}
# Fit a linear regression model
model_lr <- lm(highway_mpg ~ horsepower + torque + height + length + width + factor(year), data = cars)
summary(model_lr)
```

According to the summary above, highway MPG is positively correlated with horsepowe, with an estimated coefficient `0.0163556`. If other variable remain unchanged, highway MPG will increase by `0.0163556` for each unit increase in horsepower. Moreover, since the p-value is close to 0, the statistical inference is significant. 


**d. It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with `lm()`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.** 

**(Hint: If you choose to use the interactions package for this, look at the `at =` argument to help with how year comes into play - choose a reasonable single value for year.)**

```{r}
# Refit the model
model_rf <- lm(highway_mpg ~ horsepower * torque + height + length + width + factor(year), data = cars)
summary(model_rf)
library(interactions)
interact_plot(model_rf, pred = horsepower, modx = torque, interval = TRUE, xlab = "Horsepower", ylab = "Highway MPG", legend_title = "Torque", at = list(year = 2011))
```

**e. Calculate $\hat{\beta}$ from d. manually (without using `lm`) by first creating a proper design matrix, then using matrix algebra to estimate $\beta$. Confirm that you get the same result as `lm` did prior.** 

```{r}
matrix_x <- model.matrix(highway_mpg ~ horsepower + torque + height + length + width + factor(year), data = cars)

beta <- solve(t(matrix_x) %*% matrix_x) %*% t(matrix_x) %*% cars$highway_mpg
beta
summary(model_lr)
```
According to the calculation above, I get the same result by manually calculating as `lm` did prior.


## Problem 3 - Stata

Repeat problem 2 parts a. through d. in Stata.

**Important:** Repeating part e. (manually estimating $\hat{\beta}$) in Stata is optional . You can choose to repeat e. for minor extra credit.

Note: Quarto and Stata don't play together well, especially if youâ€™re working on Stata remotely. For this problem, and this problem only, you can write a .Do file to answer this question, then include its input and output directly into your submission, by copying the Stata output window and including a non-evaluated chunk.

```{stata, eval=FALSE, show=FALSE}
// Load the data
import delimited cars.csv, clear
describe
```

**a.  The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.**

```{stata, eval=FALSE, show=FALSE}
rename dimensionsheight height
rename dimensionslength length
rename dimensionswidth width
rename engineinformationdriveline driveline
rename engineinformationenginetype engine_type
rename engineinformationhybrid hybrid
rename engineinformationnumberofforward num_fwd_gears
rename engineinformationtransmission transmission
rename fuelinformationcitympg city_mpg
rename fuelinformationfueltype fuel_type
rename fuelinformationhighwaympg highway_mpg
rename identificationclassification classification
rename identificationid id
rename identificationmake make
rename identificationmodelyear model_year
rename identificationyear year
rename engineinformationenginestatistic horsepower
rename v18 torque
```

**b.  Restrict the data to cars whose Fuel Type is "Gasoline".**

`````{stata, eval=FALSE, show=FALSE}
// Restrict the data to cars whose Fuel Type is "Gasoline"
keep if fuel_type == "Gasoline"
`````
**c. Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:**

* **The torque of the engine**
* **All three dimensions of the car**
* **The year the car was released, as a categorical variable**

**Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.**

```{stata, eval=FALSE, show=FALSE}
// Fit a linear regression model
reg highway_mpg horsepower torque height length width i.year
```

**d. It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with `lm()`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.** 

```{stata, eval=FALSE, show=FALSE}
// Refit the model
reg highway_mpg c.horsepower##c.torque height length width i.year

// Interaction plot
margins, at(horsepower=(100(35)638) year=(2011) torque=(187 260 335))
marginsplot, title("Interaction Plot between Horsepower and Torque") xtitle("Horsepower") ytitle("Highway MPG")
```

```{stata, eval=FALSE}
// Load the data
import delimited cars.csv, clear
describe

// Rename the columns of the data
rename dimensionsheight height
rename dimensionslength length
rename dimensionswidth width
rename engineinformationdriveline driveline
rename engineinformationenginetype engine_type
rename engineinformationhybrid hybrid
rename engineinformationnumberofforward num_fwd_gears
rename engineinformationtransmission transmission
rename fuelinformationcitympg city_mpg
rename fuelinformationfueltype fuel_type
rename fuelinformationhighwaympg highway_mpg
rename identificationclassification classification
rename identificationid id
rename identificationmake make
rename identificationmodelyear model_year
rename identificationyear year
rename engineinformationenginestatistic horsepower
rename v18 torque

// Restrict the data to cars whose Fuel Type is "Gasoline"
keep if fuel_type == "Gasoline"

// Fit a linear regression model
reg highway_mpg horsepower torque height length width i.year

// Refit the model
reg highway_mpg c.horsepower##c.torque height length width i.year

// Interaction plot
margins, at(horsepower=(100(35)638) year=(2011) torque=(187 260 335))
marginsplot, title("Interaction Plot between Horsepower and Torque") xtitle("Horsepower") ytitle("Highway MPG")
```

```{stata, eval=FALSE}

. import delimited cars.csv, clear
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)

. 
. describe

Contains data
 Observations:         5,076                  
    Variables:            18                  
--------------------------------------------------------------------------------
Variable      Storage   Display    Value
    name         type    format    label      Variable label
--------------------------------------------------------------------------------
dimensionshei~t int     %8.0g                 Dimensions.Height
dimensionslen~h int     %8.0g                 Dimensions.Length
dimensionswidth int     %8.0g                 Dimensions.Width
engineinform~ne str17   %17s                  Engine Information.Driveline
engineinform~pe str60   %60s                  Engine Information.Engine Type
engineinform~id str4    %9s                   Engine Information.Hybrid
engineinform~rd byte    %8.0g                 Engine Information.Number of
                                                Forward Gears
engineinforma~n str30   %30s                  Engine Information.Transmission
fuelinfor~tympg byte    %8.0g                 Fuel Information.City mpg
fuelinformati~e str22   %22s                  Fuel Information.Fuel Type
fuelinfor~aympg int     %8.0g                 Fuel Information.Highway mpg
identificatio~n str22   %22s                  Identification.Classification
identificatio~d str67   %67s                  Identification.ID
identificatio~e str18   %18s                  Identification.Make
identific~lyear str48   %48s                  Identification.Model Year
identific~nyear int     %8.0g                 Identification.Year
engineinforma~c int     %8.0g                 Engine Information.Engine
                                                Statistics.Horsepower
v18             int     %8.0g                 Engine Information.Engine
                                                Statistics.Torque
--------------------------------------------------------------------------------
Sorted by: 
     Note: Dataset has changed since last saved.

. 
. 
. 
. // Rename the columns of the data
/ is not a valid command name
r(199);

. 
. rename dimensionsheight height

. 
. rename dimensionslength length

. 
. rename dimensionswidth width

. 
. rename engineinformationdriveline driveline

. 
. rename engineinformationenginetype engine_type

. 
. rename engineinformationhybrid hybrid

. 
. rename engineinformationnumberofforward num_fwd_gears

. 
. rename engineinformationtransmission transmission

. 
. rename fuelinformationcitympg city_mpg

. 
. rename fuelinformationfueltype fuel_type

. 
. rename fuelinformationhighwaympg highway_mpg

. 
. rename identificationclassification classification

. 
. rename identificationid id

. 
. rename identificationmake make

. 
. rename identificationmodelyear model_year

. 
. rename identificationyear year

. 
. rename engineinformationenginestatistic horsepower

. 
. rename v18 torque

. 
. 
. 
. // Restrict the data to cars whose Fuel Type is "Gasoline"
/ is not a valid command name
r(199);

. 
. keep if fuel_type == "Gasoline"
(485 observations deleted)

. 
. 
. 
. // Fit a linear regression model
/ is not a valid command name
r(199);

. 
. reg highway_mpg horsepower torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------

. 
. 
. 
. // Refit the model
/ is not a valid command name
r(199);

. 
. reg highway_mpg c.horsepower##c.torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

-------------------------------------------------------------------------------
  highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
   horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
       torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
              |
 c.horsepower#|
     c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
              |
       height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
       length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
        width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
              |
         year |
        2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
        2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
        2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
              |
        _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
-------------------------------------------------------------------------------

. 
. 
. 
. // Interaction plot
/ is not a valid command name
r(199);

. 
. margins, at(horsepower=(100(35)638) year=(2011) torque=(187 260 335))

Predictive margins                                       Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at:  horsepower =  100
        torque     =  187
        year       = 2011
2._at:  horsepower =  100
        torque     =  260
        year       = 2011
3._at:  horsepower =  100
        torque     =  335
        year       = 2011
4._at:  horsepower =  125
        torque     =  187
        year       = 2011
5._at:  horsepower =  125
        torque     =  260
        year       = 2011
6._at:  horsepower =  125
        torque     =  335
        year       = 2011
7._at:  horsepower =  150
        torque     =  187
        year       = 2011
8._at:  horsepower =  150
        torque     =  260
        year       = 2011
9._at:  horsepower =  150
        torque     =  335
        year       = 2011
10._at: horsepower =  175
        torque     =  187
        year       = 2011
11._at: horsepower =  175
        torque     =  260
        year       = 2011
12._at: horsepower =  175
        torque     =  335
        year       = 2011
13._at: horsepower =  200
        torque     =  187
        year       = 2011
14._at: horsepower =  200
        torque     =  260
        year       = 2011
15._at: horsepower =  200
        torque     =  335
        year       = 2011
16._at: horsepower =  225
        torque     =  187
        year       = 2011
17._at: horsepower =  225
        torque     =  260
        year       = 2011
18._at: horsepower =  225
        torque     =  335
        year       = 2011
19._at: horsepower =  250
        torque     =  187
        year       = 2011
20._at: horsepower =  250
        torque     =  260
        year       = 2011
21._at: horsepower =  250
        torque     =  335
        year       = 2011
22._at: horsepower =  275
        torque     =  187
        year       = 2011
23._at: horsepower =  275
        torque     =  260
        year       = 2011
24._at: horsepower =  275
        torque     =  335
        year       = 2011
25._at: horsepower =  300
        torque     =  187
        year       = 2011
26._at: horsepower =  300
        torque     =  260
        year       = 2011
27._at: horsepower =  300
        torque     =  335
        year       = 2011
28._at: horsepower =  325
        torque     =  187
        year       = 2011
29._at: horsepower =  325
        torque     =  260
        year       = 2011
30._at: horsepower =  325
        torque     =  335
        year       = 2011
31._at: horsepower =  350
        torque     =  187
        year       = 2011
32._at: horsepower =  350
        torque     =  260
        year       = 2011
33._at: horsepower =  350
        torque     =  335
        year       = 2011
34._at: horsepower =  375
        torque     =  187
        year       = 2011
35._at: horsepower =  375
        torque     =  260
        year       = 2011
36._at: horsepower =  375
        torque     =  335
        year       = 2011
37._at: horsepower =  400
        torque     =  187
        year       = 2011
38._at: horsepower =  400
        torque     =  260
        year       = 2011
39._at: horsepower =  400
        torque     =  335
        year       = 2011
40._at: horsepower =  425
        torque     =  187
        year       = 2011
41._at: horsepower =  425
        torque     =  260
        year       = 2011
42._at: horsepower =  425
        torque     =  335
        year       = 2011
43._at: horsepower =  450
        torque     =  187
        year       = 2011
44._at: horsepower =  450
        torque     =  260
        year       = 2011
45._at: horsepower =  450
        torque     =  335
        year       = 2011
46._at: horsepower =  475
        torque     =  187
        year       = 2011
47._at: horsepower =  475
        torque     =  260
        year       = 2011
48._at: horsepower =  475
        torque     =  335
        year       = 2011
49._at: horsepower =  500
        torque     =  187
        year       = 2011
50._at: horsepower =  500
        torque     =  260
        year       = 2011
51._at: horsepower =  500
        torque     =  335
        year       = 2011
52._at: horsepower =  525
        torque     =  187
        year       = 2011
53._at: horsepower =  525
        torque     =  260
        year       = 2011
54._at: horsepower =  525
        torque     =  335
        year       = 2011
55._at: horsepower =  550
        torque     =  187
        year       = 2011
56._at: horsepower =  550
        torque     =  260
        year       = 2011
57._at: horsepower =  550
        torque     =  335
        year       = 2011
58._at: horsepower =  575
        torque     =  187
        year       = 2011
59._at: horsepower =  575
        torque     =  260
        year       = 2011
60._at: horsepower =  575
        torque     =  335
        year       = 2011
61._at: horsepower =  600
        torque     =  187
        year       = 2011
62._at: horsepower =  600
        torque     =  260
        year       = 2011
63._at: horsepower =  600
        torque     =  335
        year       = 2011
64._at: horsepower =  625
        torque     =  187
        year       = 2011
65._at: horsepower =  625
        torque     =  260
        year       = 2011
66._at: horsepower =  625
        torque     =  335
        year       = 2011

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   27.63439   .2387161   115.76   0.000      27.1664    28.10239
          2  |   22.17227   .3596594    61.65   0.000     21.46717    22.87738
          3  |    16.5605   .5122209    32.33   0.000      15.5563     17.5647
          4  |   27.74308   .1926692   143.99   0.000     27.36535     28.1208
          5  |   22.48601   .3089608    72.78   0.000     21.88029    23.09172
          6  |   17.08491   .4600585    37.14   0.000     16.18297    17.98684
          7  |   27.85176   .1526688   182.43   0.000     27.55246    28.15107
          8  |   22.79974   .2594875    87.86   0.000     22.29102    23.30846
          9  |   17.60931   .4083223    43.13   0.000      16.8088    18.40982
         10  |   27.96045    .124677   224.26   0.000     27.71602    28.20487
         11  |   23.11348   .2120987   108.98   0.000     22.69766    23.52929
         12  |   18.13371   .3571975    50.77   0.000     17.43343    18.83399
         13  |   28.06913   .1176061   238.67   0.000     27.83857     28.2997
         14  |   23.42721   .1685619   138.98   0.000     23.09675    23.75768
         15  |   18.65812   .3069897    60.78   0.000     18.05627    19.25997
         16  |   28.17782   .1347898   209.05   0.000     27.91356    28.44207
         17  |   23.74095   .1327232   178.88   0.000     23.48075    24.00115
         18  |   19.18252   .2582343    74.28   0.000     18.67626    19.68879
         19  |    28.2865   .1689842   167.39   0.000     27.95521    28.61779
         20  |   24.05468   .1122182   214.36   0.000     23.83468    24.27469
         21  |   19.70693   .2119362    92.99   0.000     19.29143    20.12242
         22  |   28.39519   .2121162   133.87   0.000     27.97934    28.81104
         23  |   24.36842   .1155228   210.94   0.000     24.14194     24.5949
         24  |   20.23133   .1701135   118.93   0.000     19.89783    20.56484
         25  |   28.50387   .2597713   109.73   0.000     27.99459    29.01315
         26  |   24.68215   .1409725   175.08   0.000     24.40578    24.95853
         27  |   20.75574   .1369304   151.58   0.000     20.48729    21.02418
         28  |   28.61255   .3098698    92.34   0.000     28.00506    29.22005
         29  |   24.99589   .1793769   139.35   0.000     24.64423    25.34756
         30  |   21.28014   .1197954   177.64   0.000     21.04528      21.515
         31  |   28.72124   .3613968    79.47   0.000     28.01273    29.42975
         32  |   25.30963   .2241741   112.90   0.000     24.87014    25.74912
         33  |   21.80454   .1254656   173.79   0.000     21.55857    22.05052
         34  |   28.82992   .4138192    69.67   0.000     28.01864    29.64121
         35  |   25.62336   .2722262    94.13   0.000     25.08967    26.15706
         36  |   22.32895      .1514   147.48   0.000     22.03213    22.62577
         37  |   28.93861   .4668353    61.99   0.000     28.02339    29.85383
         38  |    25.9371   .3220796    80.53   0.000     25.30567    26.56853
         39  |   22.85335   .1894518   120.63   0.000     22.48194    23.22477
         40  |   29.04729   .5202637    55.83   0.000     28.02732    30.06726
         41  |   26.25083   .3730129    70.38   0.000     25.51955    26.98212
         42  |   23.37776   .2337771   100.00   0.000     22.91944    23.83607
         43  |   29.15598   .5739893    50.80   0.000     28.03068    30.28127
         44  |   26.56457   .4246375    62.56   0.000     25.73207    27.39706
         45  |   23.90216   .2814269    84.93   0.000     23.35043    24.45389
         46  |   29.26466   .6279359    46.60   0.000      28.0336    30.49572
         47  |    26.8783   .4767291    56.38   0.000     25.94368    27.81292
         48  |   24.42657   .3309685    73.80   0.000     23.77771    25.07542
         49  |   29.37335   .6820509    43.07   0.000      28.0362    30.71049
         50  |   27.19204   .5291496    51.39   0.000     26.15465    28.22943
         51  |   24.95097   .3816659    65.37   0.000     24.20272    25.69922
         52  |   29.48203   .7362972    40.04   0.000     28.03853    30.92553
         53  |   27.50577   .5818102    47.28   0.000     26.36515     28.6464
         54  |   25.47537   .4331135    58.82   0.000     24.62626    26.32449
         55  |   29.59071   .7906478    37.43   0.000     28.04066    31.14077
         56  |   27.81951   .6346511    43.83   0.000     26.57529    29.06373
         57  |   25.99978   .4850726    53.60   0.000      25.0488    26.95075
         58  |    29.6994   .8450826    35.14   0.000     28.04263    31.35617
         59  |   28.13325   .6876307    40.91   0.000     26.78516    29.48133
         60  |   26.52418   .5373948    49.36   0.000     25.47063    27.57774
         61  |   29.80808   .8995864    33.14   0.000     28.04446    31.57171
         62  |   28.44698   .7407194    38.40   0.000     26.99481    29.89915
         63  |   27.04859   .5899836    45.85   0.000     25.89193    28.20524
         64  |   29.91677   .9541472    31.35   0.000     28.04618    31.78736
         65  |   28.76072   .7938951    36.23   0.000      27.2043    30.31713
         66  |   27.57299   .6427735    42.90   0.000     26.31285    28.83314
------------------------------------------------------------------------------

. 
. marginsplot, title("Interaction Plot between Horsepower and Torque") xtitle("H
> orsepower") ytitle("Highway MPG")
```

```{figure, width=40%, align="center"}
![](./interaction_plot_stata.png)